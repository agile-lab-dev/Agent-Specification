openapi: 3.0.0
info:
  title: Agent Descriptor Specification
  description: Defines the attributes of an autonomous agent in an agentic system.
  version: 1.0.0
  contact:
    email: communityimpact@agilelab.it
tags:
  - name: agent
    description: Operations related to agents
  - name: component
    description: Operations related to components
servers:
  - url: http://www.agents.com
paths:
  /agents/{agentId}:
    get:
      summary: Get agent by ID
      operationId: getAgentById
      description: Retrieve a specific agent by its unique ID
      tags:
        - agent
      parameters:
        - name: agentId
          in: path
          required: true
          description: Unique identifier of the agent
          schema:
            type: string
      responses:
        "200":
          description: Agent details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AgentDescriptor"
        "404":
          description: Agent not found
        "500":
          description: Server error
  /agents:
    get:
      summary: Get all agents
      operationId: getAllAgents
      description: Retrieve a list of all registered agents
      tags:
        - agent
      responses:
        "200":
          description: A list of agents
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AgentDescriptor"
        "500":
          description: Server error
    post:
      summary: Register a new agent
      operationId: registerAgent
      description: register a new agent
      tags:
        - agent
      requestBody:
        description: Agent object that needs to be added to the system
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AgentDescriptor"
      responses:
        "201":
          description: Agent registered successfully
        "400":
          description: Invalid input
  /components/{componentId}:
    get:
      summary: Get component by ID
      operationId: getComponentById
      description: Retrieve a specific component by its unique ID
      tags:
        - component
      parameters:
        - name: componentId
          in: path
          required: true
          description: Unique identifier of the component
          schema:
            type: string
      responses:
        "200":
          description: Component details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AgentComponent"
        "404":
          description: Component not found
        "500":
          description: Server error
  /components:
    get:
      summary: Get all components
      operationId: getAllComponents
      description: Retrieve a list of all registered components
      tags:
        - component
      responses:
        "200":
          description: A list of components
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AgentComponent"
        "500":
          description: Server error
    post:
      summary: Register a new component
      operationId: registerComponent
      description: Register a new component
      tags:
        - component
      requestBody:
        description: Component object that needs to be added to the system
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AgentComponent"
      responses:
        "201":
          description: Component registered successfully
        "400":
          description: Invalid input
components:
  schemas:
    AgentDescriptor:
      type: object
      required:
        - id
        - name
        - domain
        - version
        - status
      properties:
        id:
          type: string
          description: Unique identifier for the agent.
          examples: [urn:agent:finance:trading_agent:1]
        name:
          type: string
          description: Human-readable name of the agent.
          examples: [My Trading Agent]
        fullyQualifiedName:
          type: string
          description: Fully qualified name of the agent.
          examples: [My Trading Agent]
        description:
          type: string
          description: Describes the agentâ€™s purpose and role.
        domain:
          type: string
          description: The domain in which the agent operates.
          examples: [finance]
        version:
          type: string
          description: The version of the agent.
          examples: [1.0.0]
        environment:
          type: string
          description: Execution environment (e.g., development, production).
          examples: [production]
        agentOwner:
          type: string
          description: The primary owner of the agent.
        agentOwnerDisplayName:
          type: string
          description: Display name of the owner.
        email:
          type: string
          description: Contact email for the agent.
          examples: [mailto:support@corp.com]
        status:
          type: string
          description: Deployment status of the agent.
          examples: [ACTIVE]
        kind:
          type: string
          description: Agent type to support different agentic system architectures
          examples: [Supervisor]
          enum:
            - Supervisor
            - Single Agent
            - Multi Agent
            - Router
        agentGoal:
          type: string
          description: optimize returns and risk
          examples:
            - Try to keep the balance between a yield return of 10% and a portfolio volatility no more than 3%
        targetUser:
          type: string
          description: The final user of the agent
          enum:
            - internal
            - customer
        valueGeneration:
          type: string
          description: In which way this Agent generates value for the organization
          examples: ["Derisking"]
          enum:
            - DecisionMaking
            - Derisking
            - ProcessAutomation
            - InformationRetrieval

        interactionMode:
          type: string
          description: Mode of execution (e.g., autonomous, human in the loop).
          examples: ["Autonomous"]
          enum:
            - RequestResponse
            - MultiTurnConversation
            - HumanInTheLoop
            - Autonomous

        runMode:
          type: string
          description: How the agent execution is triggered
          examples: ["Scheduled"]
          enum:
            - Reactive
            - Scheduled
            - RealTime

        agencyLevel:
          type: string
          description: How big is the agency for this agent
          examples: ["Rule Constrained"]
          enum:
            - StaticWorkflow
            - ModelDrivenWorkflow

        toolsUse:
          type: boolean
          description: Define if the system can use tools in order to execute its task

        learningCapability:
          type: string
          description: How the agent will learn on the way
          examples: ["Reinforcement Learning"]
          enum:
            - None
            - Reinforcement Learning
            - Fine Tuning

        endpoint:
          type: object
          description: Defines where external systems or users can communicate with the agent.
          properties:
            apiUrl:
              type: string
              description: The primary API URL for interacting with the agent.
              examples: ["https://api.tradingagent.com/v1"]
            authenticationMethod:
              type: string
              description: Type of authentication required.
              examples: ["OAuth2"]
            supportedMethods:
              type: array
              description: List of HTTP methods supported.
              items:
                type: string
              examples: [["GET", "POST", "PUT", "DELETE"]]
        dependencies:
          type: array
          description: List of other agents this agent relies on.
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              description:
                type: string
        components:
          type: array
          description: Different components that make up the agent, including reasoners, tools, LLMs, and local memory.
          items:
            $ref: "#/components/schemas/AgentComponent"
          maxItems: 100
        audit:
          type: object
          description: Monitoring and logging details.
          properties:
            healthCheck:
              type: string
              description: Automated monitoring endpoint.
              examples: ["https://api.tradingagent.com/v1/health"]
            decisionLogs:
              type: string
              description: Endpoint to retrieve decision logs.
              examples: ["https://api.tradingagent.com/v1/logs"]
            anomalyDetection:
              type: string
              description: API endpoint for anomaly detection.
              examples: ["https://api.tradingagent.com/v1/anomalies"]
        knowledgeBases:
          type: array
          description: Where this agent reads data from.
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              sourceType:
                type: string
                enum:
                  - Structured
                  - Unstructured
                  - Streaming
                  - Historical
                description: Type of data source.
                examples: ["Structured"]
              description:
                type: string
              endpoint:
                type: string
                description: API or database connection string.
                examples: ["https://datawarehouse.company.com/api"]
        securityInfo:
          type: object
          description: Security and compliance details.
          properties:
            visibility:
              type: string
              examples: [Private]
            confidentiality:
              type: string
              examples: [High]
            gdprSensitive:
              type: boolean
              examples: [true]
        specific:
          type: object
          description: Any domain-specific metadata related to the agent.
          additionalProperties: true
    AgentComponent:
      type: object
      required:
        - id
        - name
        - kind
        - version
      properties:
        id:
          type: string
          description: Unique identifier for the component.
          examples: [urn:component:my_domain:tool:1]
        name:
          type: string
          description: Human-readable name of the component.
          examples: [Trade Execution Tool]
        kind:
          type: string
          description: Type of component (e.g., Tool, LLM, LocalMemory, Guardrail, Monitor, Orchestrator).
          enum:
            - Tool
            - LLM
            - LocalMemory
            - Guardrail
            - Orchestrator
          examples: [Tool]
        version:
          type: string
          description: Version of the component.
          examples: [1.0.0]
        description:
          type: string
          description: Describes the component's purpose and role.
          examples: [Executes trades via Interactive Brokers API.]
        dependencies:
          type: array
          description: List of other components or data sources the component depends on.
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              description:
                type: string
        endpoint:
          type: string
          description: MCP endpoint to interact with the component
          examples: [https://api.tradingtool.com/v1/execute]
        specific:
          type: object
          description: Additional metadata specific to the component.
          additionalProperties: true
    Tool:
      allOf:
        - $ref: "#/components/schemas/AgentComponent"
        - type: object
          properties:
            inputFormat:
              type: string
              description: Expected input format (e.g., JSON, XML, CSV).
              examples: [JSON]
            outputFormat:
              type: string
              description: Expected output format.
              examples: [JSON]
    LLM:
      allOf:
        - $ref: "#/components/schemas/AgentComponent"
        - type: object
          properties:
            modelName:
              type: string
              description: The name of the large language model used.
              examples: [GPT-4]
            fineTuned:
              type: boolean
              description: Whether the model has been fine-tuned for a specific task.
              examples: [true]
            apiProvider:
              type: string
              description: Provider of the model API.
              examples: [OpenAI]
    LocalMemory:
      allOf:
        - $ref: "#/components/schemas/AgentComponent"
        - type: object
          properties:
            storageType:
              type: string
              description: Type of memory storage (e.g., Redis, SQLite, In-Memory Cache).
              examples: [Redis]
            persistence:
              type: boolean
              description: Whether the memory persists across agent runs.
              examples: [true]
    Guardrail:
      allOf:
        - $ref: "#/components/schemas/AgentComponent"
        - type: object
          properties:
            enforcementLevel:
              type: string
              enum:
                - Hard
                - Soft
              description: Defines whether the rule is strictly enforced or flexible.
              examples: [Hard]
            condition:
              type: string
              description: Business condition enforced by the guardrail.
              examples: ["Prevent trade execution if risk exceeds 5%"]
            action:
              type: string
              description: Action taken when the guardrail is triggered (e.g., block, notify, log).
              examples: ["Block trade"]
    Orchestrator:
      allOf:
        - $ref: "#/components/schemas/AgentComponent"
        - type: object
          properties:
            workflowManagement:
              type: string
              description: Defines how the orchestrator manages workflows.
              examples: ["State-based workflow engine"]
            executionOrder:
              type: array
              description: Defines the sequence of components executed.
              items:
                type: string
              examples: [["Tool", "Memory", "LLM"]]
